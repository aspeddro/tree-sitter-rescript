================================================================================
Unit
================================================================================

()

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (unit)))

================================================================================
Parenthesized expressions
================================================================================

(5)
(5: int)
(())

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (parenthesized_expression
      (number)))
  (expression_statement
    (parenthesized_expression
      (number)
      (type_annotation
        (type_constructor_path
          (type_constructor)))))
  (expression_statement
    (parenthesized_expression
      (unit))))

================================================================================
Nested identifiers
================================================================================

Foo.Bar.baz
Foo.Bar.baz.qux

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (value_path
      (module_path
        (module_path
          (module_name))
        (module_name))
      (value_name)))
  (expression_statement
    (member_expression
      (value_path
        (module_path
          (module_path
            (module_name))
          (module_name))
        (value_name))
      (value_path
        (value_name)))))

================================================================================
Escape identifiers
================================================================================

\"+."

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (value_name)))

================================================================================
Tuple
================================================================================

(1, 2)
(1, 2,)

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (tuple
      (number)
      (number)))
  (expression_statement
    (tuple
      (number)
      (number))))

================================================================================
Call expression
================================================================================

min(1, 2)
pow(2.0: float, ~exp=3.0: float)
foo(3, ~bar=4, ~pun, ())
bar(~x?, ~y=?oldY,)
qux(. 1)
keep(
  item =>
    item->Foo.bar == 5
)
blocky(
  1,
  {
    open Mod
    qrux
  },
  ~third={3},
)
f(raise)

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (call_expression
      function: (value_name)
      arguments: (arguments
        (number)
        (number))))
  (expression_statement
    (call_expression
      function: (value_name)
      arguments: (arguments
        (number)
        (type_annotation
          (type_constructor_path
            (type_constructor)))
        (labeled_argument
          label: (value_path
            (value_name))
          value: (number)
          type: (type_annotation
            (type_constructor_path
              (type_constructor)))))))
  (expression_statement
    (call_expression
      function: (value_name)
      arguments: (arguments
        (number)
        (labeled_argument
          label: (value_path
            (value_name))
          value: (number))
        (labeled_argument
          label: (value_path
            (value_name)))
        (unit))))
  (expression_statement
    (call_expression
      function: (value_name)
      arguments: (arguments
        (labeled_argument
          label: (value_path
            (value_name)))
        (labeled_argument
          label: (value_path
            (value_name))
          value: (value_name)))))
  (expression_statement
    (call_expression
      function: (value_name)
      arguments: (arguments
        (uncurry)
        (number))))
  (expression_statement
    (call_expression
      function: (value_name)
      arguments: (arguments
        (function
          parameter: (value_name)
          body: (binary_expression
            left: (pipe_expression
              (value_name)
              (value_path
                (module_path
                  (module_name))
                (value_name)))
            right: (number))))))
  (expression_statement
    (call_expression
      function: (value_name)
      arguments: (arguments
        (number)
        (block
          (open_statement
            (module_path
              (module_name)))
          (expression_statement
            (value_name)))
        (labeled_argument
          label: (value_path
            (value_name))
          value: (block
            (expression_statement
              (number)))))))
  (expression_statement
    (call_expression
      function: (value_name)
      arguments: (arguments
        (value_name)))))

================================================================================
Pipe
================================================================================

foo->bar->baz
foo |> bar |> baz
xs->Array.map(foo)->Array.sum
5->Some
foo->#Id

bbox
->outset

foo->(
  x => x + 1
)

foo->{
  open Bar
  baz
}

{foo}->print()

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (pipe_expression
      (pipe_expression
        (value_name)
        (value_name))
      (value_name)))
  (expression_statement
    (pipe_expression
      (pipe_expression
        (value_name)
        (value_name))
      (value_name)))
  (expression_statement
    (pipe_expression
      (pipe_expression
        (value_name)
        (call_expression
          (value_path
            (module_path
              (module_name))
            (value_name))
          (arguments
            (value_name))))
      (value_path
        (module_path
          (module_name))
        (value_name))))
  (expression_statement
    (pipe_expression
      (number)
      (constructor_path
        (constructor_name))))
  (expression_statement
    (pipe_expression
      (value_name)
      (polyvar)))
  (expression_statement
    (pipe_expression
      (value_name)
      (value_name)))
  (expression_statement
    (pipe_expression
      (value_name)
      (parenthesized_expression
        (function
          (value_name)
          (binary_expression
            (value_name)
            (number))))))
  (expression_statement
    (pipe_expression
      (value_name)
      (block
        (open_statement
          (module_path
            (module_name)))
        (expression_statement
          (value_name)))))
  (expression_statement
    (pipe_expression
      (block
        (expression_statement
          (value_name)))
      (call_expression
        (value_name)
        (arguments)))))

================================================================================
Record
================================================================================

{
  ...old,
  foo: 32,
  bar: "baz",
  qux,
}

{a, b, c}

{School.age: 20}
{School.age: 20, name: "Big ReScript"}

{x: ?None, ?y, z: ?(None: t)}

{ ?optPunning }

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (record
      (spread_element
        (value_name))
      (record_field
        (property_identifier
          (value_name))
        (number))
      (record_field
        (property_identifier
          (value_name))
        (string
          (string_fragment)))
      (record_field
        (property_identifier
          (value_name)))))
  (expression_statement
    (record
      (record_field
        (property_identifier
          (value_name)))
      (record_field
        (property_identifier
          (value_name)))
      (record_field
        (property_identifier
          (value_name)))))
  (expression_statement
    (record
      (record_field
        (property_identifier
          (module_path
            (module_name))
          (value_name))
        (number))))
  (expression_statement
    (record
      (record_field
        (property_identifier
          (module_path
            (module_name))
          (value_name))
        (number))
      (record_field
        (property_identifier
          (value_name))
        (string
          (string_fragment)))))
  (expression_statement
    (record
      (record_field
        (property_identifier
          (value_name))
        (constructor_path
          (constructor_name)))
      (record_field
        (property_identifier
          (value_name)))
      (record_field
        (property_identifier
          (value_name))
        (parenthesized_expression
          (constructor_path
            (constructor_name))
          (type_annotation
            (type_constructor_path
              (type_constructor)))))))
  (expression_statement
    (record
      (property_identifier
        (value_name)))))

================================================================================
Object
================================================================================

{
  "foo": 32,
  "bar": "baz",
}

{ .  "x": 1 }
{ .. "x": 1 }
{ .. }

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (object
      (field
        (property_identifier
          (string_fragment))
        (number))
      (field
        (property_identifier
          (string_fragment))
        (string
          (string_fragment)))))
  (expression_statement
    (object
      (field
        (property_identifier
          (string_fragment))
        (number))))
  (expression_statement
    (object
      (field
        (property_identifier
          (string_fragment))
        (number))))
  (expression_statement
    (object)))

================================================================================
If/else
================================================================================

if predicate {
  foo
}

if predicate {
  foo
} else {
  bar
}

if predicateA {
  foo
} else if predicateB {
  qux
} else if predicateC {
  zoo
} else {
  bar
}

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (if_expression
      (value_name)
      (block
        (expression_statement
          (value_name)))))
  (expression_statement
    (if_expression
      (value_name)
      (block
        (expression_statement
          (value_name)))
      (else_clause
        (block
          (expression_statement
            (value_name))))))
  (expression_statement
    (if_expression
      (value_name)
      (block
        (expression_statement
          (value_name)))
      (else_if_clause
        (value_name)
        (block
          (expression_statement
            (value_name))))
      (else_if_clause
        (value_name)
        (block
          (expression_statement
            (value_name))))
      (else_clause
        (block
          (expression_statement
            (value_name)))))))

================================================================================
Switch of literals
================================================================================

switch foo {
| 1 | 2 => "few"
| _ =>
  let s = "very "
  s ++ "many"
}

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (switch_expression
      (value_name)
      (switch_match
        (or_pattern
          (number)
          (number))
        (sequence_expression
          (expression_statement
            (string
              (string_fragment)))))
      (switch_match
        (value_name)
        (sequence_expression
          (let_declaration
            (let_binding
              (value_name)
              (string
                (string_fragment))))
          (expression_statement
            (binary_expression
              (value_name)
              (string
                (string_fragment)))))))))

================================================================================
Switch of variants
================================================================================

switch foo {
| Some(x as qux: int, {y, z}) => x
| Option.None => 42
| Surprise() => 0
| ?Some(_) => 1
}

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (switch_expression
      (value_name)
      (switch_match
        (constructor_pattern
          (constructor_path
            (constructor_name))
          (arguments
            (alias_pattern
              (value_name)
              (value_name)
              (type_annotation
                (type_constructor_path
                  (type_constructor))))
            (record_pattern
              (value_path
                (value_name))
              (value_path
                (value_name)))))
        (sequence_expression
          (expression_statement
            (value_name))))
      (switch_match
        (constructor_pattern
          (constructor_path
            (module_path
              (module_name))
            (constructor_name)))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (constructor_pattern
          (constructor_path
            (constructor_name))
          (arguments))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (constructor_pattern
          (constructor_path
            (constructor_name))
          (arguments
            (value_name)))
        (sequence_expression
          (expression_statement
            (number)))))))

================================================================================
Switch of polyvars
================================================================================

switch foo {
| #Bar => 42
| #Qux(a as bar: int, 3) as qux => 99
| #...Polyvar.t as toto => 5
}

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (switch_expression
      (value_name)
      (switch_match
        (polyvar_pattern
          (polyvar))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (alias_pattern
          (polyvar_pattern
            (polyvar)
            (arguments
              (alias_pattern
                (value_name)
                (value_name)
                (type_annotation
                  (type_constructor_path
                    (type_constructor))))
              (number)))
          (value_name))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (alias_pattern
          (polyvar_type_pattern
            (type_constructor_path
              (module_path
                (module_name))
              (type_constructor)))
          (value_name))
        (sequence_expression
          (expression_statement
            (number)))))))

================================================================================
Switch of vars
================================================================================

switch foo {
| x if x > 42 && x < 99 => x
| x when x > 100 => x
| _ => 42
}

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (switch_expression
      (value_name)
      (switch_match
        (value_name)
        (guard
          (binary_expression
            (binary_expression
              (value_name)
              (number))
            (binary_expression
              (value_name)
              (number))))
        (sequence_expression
          (expression_statement
            (value_name))))
      (switch_match
        (value_name)
        (guard
          (binary_expression
            (value_name)
            (number)))
        (sequence_expression
          (expression_statement
            (value_name))))
      (switch_match
        (value_name)
        (sequence_expression
          (expression_statement
            (number)))))))

================================================================================
Switch of tuples
================================================================================

switch (foo, bar) {
| (42, 99 as zoo) => 42
| (Variant1, #...t) => 5
| (_, _) => 13
}

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (switch_expression
      (tuple
        (value_name)
        (value_name))
      (switch_match
        (tuple_pattern
          (tuple_item_pattern
            (number))
          (tuple_item_pattern
            (alias_pattern
              (number)
              (value_name))))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (tuple_pattern
          (tuple_item_pattern
            (constructor_pattern
              (constructor_path
                (constructor_name))))
          (tuple_item_pattern
            (polyvar_type_pattern
              (type_constructor_path
                (type_constructor)))))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (tuple_pattern
          (tuple_item_pattern
            (value_name))
          (tuple_item_pattern
            (value_name)))
        (sequence_expression
          (expression_statement
            (number)))))))

================================================================================
Switch of mixed tuples
================================================================================

switch tuple {
| (Variant1 | Variant2, 42.0) => 10
| _ => 20
}

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (switch_expression
      (value_name)
      (switch_match
        (tuple_pattern
          (tuple_item_pattern
            (or_pattern
              (constructor_pattern
                (constructor_path
                  (constructor_name)))
              (constructor_pattern
                (constructor_path
                  (constructor_name)))))
          (tuple_item_pattern
            (number)))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (value_name)
        (sequence_expression
          (expression_statement
            (number)))))))

================================================================================
Switch of record patterns
================================================================================

switch person {
| Teacher({name: "Mary" | "Joe"}) => 10
| Student({
    reportCard: {gpa: 0.0},
    status: Vacations(daysLeft) | Sabbatical(daysLeft)
  }) => 20
| Student({status: Sick}) => 30
| Student({name}) => 40
}

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (switch_expression
      (value_name)
      (switch_match
        (constructor_pattern
          (constructor_path
            (constructor_name))
          (arguments
            (record_pattern
              (value_path
                (value_name))
              (or_pattern
                (string
                  (string_fragment))
                (string
                  (string_fragment))))))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (constructor_pattern
          (constructor_path
            (constructor_name))
          (arguments
            (record_pattern
              (value_path
                (value_name))
              (record_pattern
                (value_path
                  (value_name))
                (number))
              (value_path
                (value_name))
              (or_pattern
                (constructor_pattern
                  (constructor_path
                    (constructor_name))
                  (arguments
                    (value_name)))
                (constructor_pattern
                  (constructor_path
                    (constructor_name))
                  (arguments
                    (value_name)))))))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (constructor_pattern
          (constructor_path
            (constructor_name))
          (arguments
            (record_pattern
              (value_path
                (value_name))
              (constructor_pattern
                (constructor_path
                  (constructor_name))))))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (constructor_pattern
          (constructor_path
            (constructor_name))
          (arguments
            (record_pattern
              (value_path
                (value_name)))))
        (sequence_expression
          (expression_statement
            (number)))))))

================================================================================
Switch of lists
================================================================================

switch foo {
| list{current as qux, ...others} => 1
| list{1, 2, x} => 2
| list{1, } => 3
| list{...others} => 4
| list{1, 2, ...list{b, ..._} as rest} => rest
}

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (switch_expression
      (value_name)
      (switch_match
        (list_pattern
          (alias_pattern
            (value_name)
            (value_name))
          (spread_pattern
            (value_name)))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (list_pattern
          (number)
          (number)
          (value_name))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (list_pattern
          (number))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (list_pattern
          (spread_pattern
            (value_name)))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (list_pattern
          (number)
          (number)
          (alias_pattern
            (spread_pattern
              (list_pattern
                (value_name)
                (spread_pattern
                  (value_name))))
            (value_name)))
        (sequence_expression
          (expression_statement
            (value_name)))))))

================================================================================
Switch of arrays
================================================================================

switch foo {
| [head, ...others] => 1
| [1, 2 as bar, x] => 2
| [1,
  ] => 3
| [...others] => 4
}

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (switch_expression
      (value_name)
      (switch_match
        (array_pattern
          (value_name)
          (spread_pattern
            (value_name)))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (array_pattern
          (number)
          (alias_pattern
            (number)
            (value_name))
          (value_name))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (array_pattern
          (number))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (array_pattern
          (spread_pattern
            (value_name)))
        (sequence_expression
          (expression_statement
            (number)))))))

================================================================================
Switch of statements
================================================================================

switch (element->HtmlInputElement.ofElement) {
| Some(input) =>
  HtmlInputElement.focus(input);
  HtmlInputElement.select(input);
| None => ()
};

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (switch_expression
      (parenthesized_expression
        (pipe_expression
          (value_name)
          (value_path
            (module_path
              (module_name))
            (value_name))))
      (switch_match
        pattern: (constructor_pattern
          (constructor_path
            (constructor_name))
          (arguments
            (value_name)))
        body: (sequence_expression
          (expression_statement
            (call_expression
              function: (value_path
                (module_path
                  (module_name))
                (value_name))
              arguments: (arguments
                (value_name))))
          (expression_statement
            (call_expression
              function: (value_path
                (module_path
                  (module_name))
                (value_name))
              arguments: (arguments
                (value_name))))))
      (switch_match
        pattern: (constructor_pattern
          (constructor_path
            (constructor_name)))
        body: (sequence_expression
          (expression_statement
            (unit)))))))

================================================================================
Switch exceptions
================================================================================

switch parseExn(str) {
| json => 42
| exception Js.Exn.Error(obj) => 99
}

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (switch_expression
      (call_expression
        (value_name)
        (arguments
          (value_name)))
      (switch_match
        (value_name)
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (exception_pattern
          (constructor_pattern
            (constructor_path
              (module_path
                (module_path
                  (module_name))
                (module_name))
              (constructor_name))
            (arguments
              (value_name))))
        (sequence_expression
          (expression_statement
            (number)))))))

================================================================================
Switch block
================================================================================

switch { open Mod; foo() } {
| _ => 42
}

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (switch_expression
      (block
        (open_statement
          (module_path
            (module_name)))
        (expression_statement
          (call_expression
            (value_name)
            (arguments))))
      (switch_match
        (value_name)
        (sequence_expression
          (expression_statement
            (number)))))))

================================================================================
Switch parenthesized
================================================================================

switch n {
| (1 | 2) => 1
| Some((This | That) | Unknow) => 0
}

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (switch_expression
      (value_name)
      (switch_match
        (parenthesized_pattern
          (or_pattern
            (number)
            (number)))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (constructor_pattern
          (constructor_path
            (constructor_name))
          (arguments
            (or_pattern
              (parenthesized_pattern
                (or_pattern
                  (constructor_pattern
                    (constructor_path
                      (constructor_name)))
                  (constructor_pattern
                    (constructor_path
                      (constructor_name)))))
              (constructor_pattern
                (constructor_path
                  (constructor_name))))))
        (sequence_expression
          (expression_statement
            (number)))))))

================================================================================
Switch ranges
================================================================================

switch c {
| 'b' .. 'z' => 100
}

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (switch_expression
      (value_name)
      (switch_match
        (range_pattern
          (character)
          (character))
        (sequence_expression
          (expression_statement
            (number)))))))

================================================================================
Math operators
================================================================================

- 1 + 2 / 3
-. 1.0 +. 2.0 /. 3.0
2.0 ** 3.0

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (binary_expression
      (unary_expression
        (number))
      (binary_expression
        (number)
        (number))))
  (expression_statement
    (binary_expression
      (unary_expression
        (number))
      (binary_expression
        (number)
        (number))))
  (expression_statement
    (binary_expression
      (number)
      (number))))

================================================================================
Boolean operators
================================================================================

i || j;
i && j;
!a && !b || !c && !d;

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (binary_expression
      (value_name)
      (value_name)))
  (expression_statement
    (binary_expression
      (value_name)
      (value_name)))
  (expression_statement
    (binary_expression
      (binary_expression
        (unary_expression
          (value_name))
        (unary_expression
          (value_name)))
      (binary_expression
        (unary_expression
          (value_name))
        (unary_expression
          (value_name))))))

================================================================================
String operators
================================================================================

s1 ++ s2
s1 ++ s2 ++ s3

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (binary_expression
      (value_name)
      (value_name)))
  (expression_statement
    (binary_expression
      (binary_expression
        (value_name)
        (value_name))
      (value_name))))

================================================================================
Coercion operator
================================================================================

value :> newType

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (coercion_expression
      (value_name)
      (type_constructor_path
        (type_constructor)))))

================================================================================
Ternaries
================================================================================

condition ? case1 : case2

condition
  ? case1
  : case2

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (ternary_expression
      (value_name)
      (value_name)
      (value_name)))
  (expression_statement
    (ternary_expression
      (value_name)
      (value_name)
      (value_name))))

================================================================================
Arrays
================================================================================

[]
[1]
[1, 2]

[
  1,
  2,
]

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (array))
  (expression_statement
    (array
      (number)))
  (expression_statement
    (array
      (number)
      (number)))
  (expression_statement
    (array
      (number)
      (number))))

================================================================================
Lists
================================================================================

list{}
list{1}
list{1,}
list{
  1,
  2,
}

list{ 1, 2, ...xs }
list{ ...xs, 1, 2 }

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (list))
  (expression_statement
    (list
      (number)))
  (expression_statement
    (list
      (number)))
  (expression_statement
    (list
      (number)
      (number)))
  (expression_statement
    (list
      (number)
      (number)
      (spread_element
        (value_name))))
  (expression_statement
    (list
      (spread_element
        (value_name))
      (number)
      (number))))

================================================================================
Member expressions
================================================================================

foo.bar.baz
foo.ModuleName.bar

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (member_expression
      (member_expression
        (value_name)
        (value_path
          (value_name)))
      (value_path
        (value_name))))
  (expression_statement
    (member_expression
      (value_name)
      (value_path
        (module_path
          (module_name))
        (value_name)))))

================================================================================
Subscript expressions
================================================================================

myArray[42]
myObj["foo"]

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (subscript_expression
      (value_name)
      (number)))
  (expression_statement
    (subscript_expression
      (value_name)
      (string
        (string_fragment)))))

================================================================================
Variants
================================================================================

Foo
Foo(42)
Foo(42: int)
Foo(qux, { bar: 3 }, )
Foo((Obj.magic(v): string))

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (constructor_path
      (constructor_name)))
  (expression_statement
    (call_expression
      (constructor_path
        (constructor_name))
      (arguments
        (number))))
  (expression_statement
    (call_expression
      (constructor_path
        (constructor_name))
      (arguments
        (number)
        (type_annotation
          (type_constructor_path
            (type_constructor))))))
  (expression_statement
    (call_expression
      (constructor_path
        (constructor_name))
      (arguments
        (value_name)
        (record
          (record_field
            (property_identifier
              (value_name))
            (number))))))
  (expression_statement
    (call_expression
      (constructor_path
        (constructor_name))
      (arguments
        (parenthesized_expression
          (call_expression
            (value_path
              (module_path
                (module_name))
              (value_name))
            (arguments
              (value_name)))
          (type_annotation
            (type_constructor_path
              (type_constructor))))))))

================================================================================
Extensions
================================================================================

%debugger
%re("/[^1-9]/g")
%%raw("function () { return 42; }")
%%private(let mult = (x, y) => x * y)
%%private(
  let x = "1"
  let y = 1;
)
let x = %raw(`
  function test(a) {
    return "\" + a + "\";
  }
`)
let x = %raw(j`
  function test(a) {
    return "\" + a + "\";
  }
`)
module Test = %graphql(`
  query {
    test {
      id
    }
  }
`)

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (extension_expression
      (extension_identifier)))
  (expression_statement
    (extension_expression
      (extension_identifier)
      (expression_statement
        (string
          (string_fragment)))))
  (expression_statement
    (extension_expression
      (extension_identifier)
      (expression_statement
        (string
          (string_fragment)))))
  (expression_statement
    (extension_expression
      (extension_identifier)
      (let_declaration
        (let_binding
          pattern: (value_name)
          body: (function
            parameters: (formal_parameters
              (parameter
                (value_name))
              (parameter
                (value_name)))
            body: (binary_expression
              left: (value_name)
              right: (value_name)))))))
  (expression_statement
    (extension_expression
      (extension_identifier)
      (let_declaration
        (let_binding
          pattern: (value_name)
          body: (string
            (string_fragment))))
      (let_declaration
        (let_binding
          pattern: (value_name)
          body: (number)))))
  (let_declaration
    (let_binding
      pattern: (value_name)
      body: (extension_expression
        (extension_identifier)
        (expression_statement
          (template_string
            (template_string_content
              (escape_sequence)
              (escape_sequence)))))))
  (let_declaration
    (let_binding
      pattern: (value_name)
      body: (extension_expression
        (extension_identifier)
        (expression_statement
          (template_string
            (template_string_content
              (escape_sequence)
              (escape_sequence)))))))
  (module_declaration
    (module_binding
      name: (module_name)
      definition: (extension_expression
        (extension_identifier)
        (expression_statement
          (template_string
            (template_string_content)))))))

================================================================================
Raise expression
================================================================================

raise(BadArgument({myMessage: "Oops!"}))
raise(InvalidInput,)

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (call_expression
      function: (value_name)
      arguments: (arguments
        (call_expression
          function: (constructor_path
            (constructor_name))
          arguments: (arguments
            (record
              (record_field
                (property_identifier
                  (value_name))
                (string
                  (string_fragment)))))))))
  (expression_statement
    (call_expression
      function: (value_name)
      arguments: (arguments
        (constructor_path
          (constructor_name))))))

================================================================================
Assert expression
================================================================================

assert false
assert { 1 > 2 }
let f = () => assert false

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (assert_expression
      (false)))
  (expression_statement
    (assert_expression
      (block
        (expression_statement
          (binary_expression
            (number)
            (number))))))
  (let_declaration
    (let_binding
      (value_name)
      (function
        (formal_parameters)
        (assert_expression
          (false))))))

================================================================================
Try-catch
================================================================================

try {
  someOtherJSFunctionThatThrows()
} catch {
| Not_found => 1
| FooBar({ x, y }) => 2
| Js.Exn.Error(obj) => 3
}

try switch foo() {
| 1 => "1"
| 2 => "2"
| _ => "many"
} catch {
| Js.Exn.Error(obj) => "error"
}

try for i in 0 to 10 {
  call()
} catch {
| Not_found => false
} 

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (try_expression
      (block
        (expression_statement
          (call_expression
            (value_name)
            (arguments))))
      (switch_match
        (constructor_pattern
          (constructor_path
            (constructor_name)))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (constructor_pattern
          (constructor_path
            (constructor_name))
          (arguments
            (record_pattern
              (value_path
                (value_name))
              (value_path
                (value_name)))))
        (sequence_expression
          (expression_statement
            (number))))
      (switch_match
        (constructor_pattern
          (constructor_path
            (module_path
              (module_path
                (module_name))
              (module_name))
            (constructor_name))
          (arguments
            (value_name)))
        (sequence_expression
          (expression_statement
            (number))))))
  (expression_statement
    (try_expression
      (switch_expression
        (call_expression
          (value_name)
          (arguments))
        (switch_match
          (number)
          (sequence_expression
            (expression_statement
              (string
                (string_fragment)))))
        (switch_match
          (number)
          (sequence_expression
            (expression_statement
              (string
                (string_fragment)))))
        (switch_match
          (value_name)
          (sequence_expression
            (expression_statement
              (string
                (string_fragment))))))
      (switch_match
        (constructor_pattern
          (constructor_path
            (module_path
              (module_path
                (module_name))
              (module_name))
            (constructor_name))
          (arguments
            (value_name)))
        (sequence_expression
          (expression_statement
            (string
              (string_fragment)))))))
  (expression_statement
    (try_expression
      (for_expression
        (value_path
          (value_name))
        (number)
        (number)
        (block
          (expression_statement
            (call_expression
              (value_name)
              (arguments)))))
      (switch_match
        (constructor_pattern
          (constructor_path
            (constructor_name)))
        (sequence_expression
          (expression_statement
            (false)))))))

================================================================================
Mutation expressions
================================================================================

foo["bar"] = qux
foo.bar = qux
foo.bar := qux

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (mutation_expression
      (subscript_expression
        (value_name)
        (string
          (string_fragment)))
      (value_name)))
  (expression_statement
    (mutation_expression
      (member_expression
        (value_name)
        (value_path
          (value_name)))
      (value_name)))
  (expression_statement
    (mutation_expression
      (member_expression
        (value_name)
        (value_path
          (value_name)))
      (value_name))))

================================================================================
For loop
================================================================================

for x in 1 to 3 {
  Js.log(x)
}

for x in 1 downto 3 {
  Js.log(x)
}

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (for_expression
      (value_path
        (value_name))
      (number)
      (number)
      (block
        (expression_statement
          (call_expression
            (value_path
              (module_path
                (module_name))
              (value_name))
            (arguments
              (value_name)))))))
  (expression_statement
    (for_expression
      (value_path
        (value_name))
      (number)
      (number)
      (block
        (expression_statement
          (call_expression
            (value_path
              (module_path
                (module_name))
              (value_name))
            (arguments
              (value_name))))))))

================================================================================
While loop
================================================================================

while true {
  Js.log("Still running")
}

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (while_expression
      (true)
      (block
        (expression_statement
          (call_expression
            (value_path
              (module_path
                (module_name))
              (value_name))
            (arguments
              (string
                (string_fragment)))))))))

================================================================================
Await expression
================================================================================

await somePromise
await foo()
await foo->bar + 5

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (await_expression
      (value_name)))
  (expression_statement
    (await_expression
      (call_expression
        (value_name)
        (arguments))))
  (expression_statement
    (binary_expression
      (await_expression
        (pipe_expression
          (value_name)
          (value_name)))
      (number))))

================================================================================
As aliasing
================================================================================

let f = ({name, _} as foo: T.t) => {}

--------------------------------------------------------------------------------

(source_file
  (let_declaration
    (let_binding
      pattern: (value_name)
      body: (function
        parameters: (formal_parameters
          (parameter
            (alias_pattern
              (record_pattern
                (value_path
                  (value_name))
                (value_path
                  (value_name)))
              (value_name)
              (type_annotation
                (type_constructor_path
                  (module_path
                    (module_name))
                  (type_constructor))))))
        body: (block)))))

================================================================================
Lazy Expression
================================================================================

lazy { 1 }
lazy call()

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (lazy_expression
      (block
        (expression_statement
          (number)))))
  (expression_statement
    (lazy_expression
      (call_expression
        (value_name)
        (arguments)))))
