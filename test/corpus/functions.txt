================================================================================
Simple parameters
================================================================================

a => 1
() => 2
(d, e) => 3
(f, g) => {
  h
}
(trailing,) => 4
(h, trailing,) => 5
(set, kv) => 2
(a, .b, c, .d) => 7
(async) => 1

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (function
      (value_name)
      (number)))
  (expression_statement
    (function
      (formal_parameters)
      (number)))
  (expression_statement
    (function
      (formal_parameters
        (parameter
          (value_name))
        (parameter
          (value_name)))
      (number)))
  (expression_statement
    (function
      (formal_parameters
        (parameter
          (value_name))
        (parameter
          (value_name)))
      (block
        (expression_statement
          (value_name)))))
  (expression_statement
    (function
      (formal_parameters
        (parameter
          (value_name)))
      (number)))
  (expression_statement
    (function
      (formal_parameters
        (parameter
          (value_name))
        (parameter
          (value_name)))
      (number)))
  (expression_statement
    (function
      (formal_parameters
        (parameter
          (value_name))
        (parameter
          (value_name)))
      (number)))
  (expression_statement
    (function
      (formal_parameters
        (parameter
          (value_name))
        (parameter
          (uncurry)
          (value_name))
        (parameter
          (value_name))
        (parameter
          (uncurry)
          (value_name)))
      (number)))
  (expression_statement
    (function
      (formal_parameters
        (parameter
          (value_name)))
      (number))))

================================================================================
Type annotations
================================================================================

(x: int, ~y: float): int => 5
({contents: (x: int)}, {contents: y}) => x == y

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (function
      parameters: (formal_parameters
        (parameter
          (value_name)
          (type_annotation
            (type_constructor_path
              (type_constructor))))
        (parameter
          (labeled_parameter
            (value_name)
            (type_annotation
              (type_constructor_path
                (type_constructor))))))
      return_type: (type_annotation
        (type_constructor_path
          (type_constructor)))
      body: (number)))
  (expression_statement
    (function
      parameters: (formal_parameters
        (parameter
          (record_pattern
            (value_path
              (value_name))
            (parenthesized_pattern
              (value_name)
              (type_annotation
                (type_constructor_path
                  (type_constructor))))))
        (parameter
          (record_pattern
            (value_path
              (value_name))
            (value_name))))
      body: (binary_expression
        left: (value_name)
        right: (value_name)))))

================================================================================
Abstract type
================================================================================

let foo = (type a, x: 'a): a => x

--------------------------------------------------------------------------------

(source_file
  (let_declaration
    (let_binding
      (value_name)
      (function
        (formal_parameters
          (parameter
            (abstract_type
              (type_constructor)))
          (parameter
            (value_name)
            (type_annotation
              (type_constructor_path
                (type_constructor)))))
        (type_annotation
          (type_constructor_path
            (type_constructor)))
        (value_name)))))

================================================================================
Parameter defaults
================================================================================

(~x: int=3, ~y=4.0, ~z: int=?, ~w=?, ()) => 5

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (function
      parameters: (formal_parameters
        (parameter
          (labeled_parameter
            (value_name)
            (type_annotation
              (type_constructor_path
                (type_constructor)))
            default_value: (number)))
        (parameter
          (labeled_parameter
            (value_name)
            default_value: (number)))
        (parameter
          (labeled_parameter
            (value_name)
            (type_annotation
              (type_constructor_path
                (type_constructor)))))
        (parameter
          (labeled_parameter
            (value_name)))
        (parameter
          (unit)))
      body: (number))))

================================================================================
Parameter aliasing
================================================================================

(~xTheGreat as x: int=3) => 5
(~p as (x, _)) => x

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (function
      (formal_parameters
        (parameter
          (labeled_parameter
            (alias_pattern
              (value_name)
              (value_name))
            (type_annotation
              (type_constructor_path
                (type_constructor)))
            (number))))
      (number)))
  (expression_statement
    (function
      (formal_parameters
        (parameter
          (labeled_parameter
            (alias_pattern
              (value_name)
              (tuple_pattern
                (tuple_item_pattern
                  (value_name))
                (tuple_item_pattern
                  (value_name)))))))
      (value_name))))

================================================================================
Record pattern
================================================================================

({fooField, barField: {baz, qux}, mooField: baa}) => 5

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (function
      (formal_parameters
        (parameter
          (record_pattern
            (value_path
              (value_name))
            (value_path
              (value_name))
            (record_pattern
              (value_path
                (value_name))
              (value_path
                (value_name)))
            (value_path
              (value_name))
            (value_name))))
      (number))))

================================================================================
Ref assignment as body
================================================================================

reactRef => myRef := Some(reactRef)

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (function
      (value_name)
      (mutation_expression
        (value_path
          (value_name))
        (call_expression
          (constructor_path
            (constructor_name))
          (arguments
            (value_name)))))))

================================================================================
Operator precendence
================================================================================

(a) => a->Foo.bar == 5

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (function
      (formal_parameters
        (parameter
          (value_name)))
      (binary_expression
        (pipe_expression
          (value_name)
          (value_path
            (module_path
              (module_name))
            (value_name)))
        (number)))))

================================================================================
Async
================================================================================

async () => body

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (function
      (formal_parameters)
      (value_name))))
