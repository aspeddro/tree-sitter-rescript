================================================================================
Open
================================================================================

open Foo
open! Foo.Bar

--------------------------------------------------------------------------------

(source_file
  (open_statement
    (module_path
      (module_name)))
  (open_statement
    (module_path
      (module_path
        (module_name))
      (module_name))))

================================================================================
Include
================================================================================

include Foo
include Foo.Bar
include Foo.Bar(X)
include Foo.Bar({
  type t
  let x: int
})

include module type of Belt.Array
include (module type of Belt.Array)
include (Belt: module type of Belt with module Map.Inner := Belt.Map and module Result := Belt.Result)
include module type of {
  include T
}
include (
  {
    let a = Js.log("Hello")
  }
)

--------------------------------------------------------------------------------

(source_file
  (include_statement
    (module_path
      (module_name)))
  (include_statement
    (module_path
      (module_path
        (module_name))
      (module_name)))
  (include_statement
    (functor_use
      (module_path
        (module_path
          (module_name))
        (module_name))
      (arguments
        (module_path
          (module_name)))))
  (include_statement
    (functor_use
      (module_path
        (module_path
          (module_name))
        (module_name))
      (arguments
        (block
          (type_declaration
            (type_binding
              (type_constructor_path
                (type_constructor))))
          (let_declaration
            (let_binding
              (value_name)
              (type_annotation
                (type_constructor_path
                  (type_constructor)))))))))
  (include_statement
    (module_type_of
      (module_path
        (module_path
          (module_name))
        (module_name))))
  (include_statement
    (parenthesized_module_type
      (module_type_of
        (module_path
          (module_path
            (module_name))
          (module_name)))))
  (include_statement
    (typed_module_expression
      (module_path
        (module_name))
      (module_type_annotation
        (module_type_constraint
          (module_type_of
            (module_path
              (module_name)))
          (constrain_module
            (module_path
              (module_path
                (module_name))
              (module_name))
            (module_path
              (module_path
                (module_name))
              (module_name)))
          (constrain_module
            (module_path
              (module_name))
            (module_path
              (module_path
                (module_name))
              (module_name)))))))
  (include_statement
    (module_type_of
      (block
        (include_statement
          (module_path
            (module_name))))))
  (include_statement
    (parenthesized_module_expression
      (block
        (let_declaration
          (let_binding
            (value_name)
            (call_expression
              (value_path
                (module_path
                  (module_name))
                (value_name))
              (arguments
                (string
                  (string_fragment))))))))))

================================================================================
Simple definition
================================================================================

module MyModule = {
  type t
}

--------------------------------------------------------------------------------

(source_file
  (module_declaration
    (module_binding
      (module_name)
      (block
        (type_declaration
          (type_binding
            (type_constructor_path
              (type_constructor))))))))

================================================================================
Signature and definition
================================================================================

module MyModule: {
  let a: int
  let b: float
  let c: string
}

module MyModule: Foo.Bar = {
  type t
}

module MyModule: {
  type t
} = {
  type t = int
}

--------------------------------------------------------------------------------

(source_file
  (module_declaration
    (module_binding
      name: (module_name)
      signature: (block
        (let_declaration
          (let_binding
            pattern: (value_name)
            (type_annotation
              (type_constructor_path
                (type_constructor)))))
        (let_declaration
          (let_binding
            pattern: (value_name)
            (type_annotation
              (type_constructor_path
                (type_constructor)))))
        (let_declaration
          (let_binding
            pattern: (value_name)
            (type_annotation
              (type_constructor_path
                (type_constructor))))))))
  (module_declaration
    (module_binding
      name: (module_name)
      signature: (module_type_path
        (module_path
          (module_name))
        (module_type_name
          (module_name)))
      definition: (block
        (type_declaration
          (type_binding
            name: (type_constructor_path
              (type_constructor)))))))
  (module_declaration
    (module_binding
      name: (module_name)
      signature: (block
        (type_declaration
          (type_binding
            name: (type_constructor_path
              (type_constructor)))))
      definition: (block
        (type_declaration
          (type_binding
            name: (type_constructor_path
              (type_constructor))
            (type_constructor_path
              (type_constructor))))))))

================================================================================
Module types
================================================================================

module type S1 = { type t }
module type S2 = module type of MyModule.Submod
module type t

--------------------------------------------------------------------------------

(source_file
  (module_declaration
    (module_binding
      (module_name)
      (block
        (type_declaration
          (type_binding
            (type_constructor_path
              (type_constructor)))))))
  (module_declaration
    (module_binding
      (module_name)
      (module_type_of
        (module_path
          (module_path
            (module_name))
          (module_name)))))
  (module_declaration
    (module_binding
      (type_constructor))))

================================================================================
First Class module
================================================================================

module(LightTheme)
module(A: A)
module(
  {
    type t
    let foo = "Hello"
  }: X
)
module(SomeFunctor(unpack(x)))

module T = unpack(foo: T)

module S = unpack(foo: T with type t = a)

module S = unpack(Mod.read(v))

module S = unpack(%extension(payload))

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (package_expression
      (module_path
        (module_name))))
  (expression_statement
    (package_expression
      (module_path
        (module_name))
      (module_type_annotation
        (module_type_path
          (module_type_name
            (module_name))))))
  (expression_statement
    (package_expression
      (block
        (type_declaration
          (type_binding
            (type_constructor_path
              (type_constructor))))
        (let_declaration
          (let_binding
            (value_name)
            (string
              (string_fragment)))))
      (module_type_annotation
        (module_type_path
          (module_type_name
            (module_name))))))
  (expression_statement
    (package_expression
      (functor_use
        (module_path
          (module_name))
        (arguments
          (module_unpack
            (value_name))))))
  (module_declaration
    (module_binding
      (module_name)
      (module_unpack
        (value_name)
        (module_type_annotation
          (module_type_path
            (module_type_name
              (module_name)))))))
  (module_declaration
    (module_binding
      (module_name)
      (module_unpack
        (value_name)
        (module_type_annotation
          (module_type_constraint
            (module_type_path
              (module_type_name
                (module_name)))
            (constrain_type
              (type_constructor_path
                (type_constructor))
              (type_constructor_path
                (type_constructor))))))))
  (module_declaration
    (module_binding
      (module_name)
      (module_unpack
        (call_expression
          (value_path
            (module_path
              (module_name))
            (value_name))
          (arguments
            (value_name))))))
  (module_declaration
    (module_binding
      (module_name)
      (module_unpack
        (extension_expression
          (extension_identifier)
          (expression_statement
            (value_name)))))))

================================================================================
Functor definition
================================================================================

module MyFunctor = (X: {type t}, Y: {type t}): {type tx; type ty} => {
  type tx = X.t
  type ty = Y.t
}

--------------------------------------------------------------------------------

(source_file
  (module_declaration
    (module_binding
      name: (module_name)
      definition: (functor
        parameters: (functor_parameters
          (functor_parameter
            (module_path
              (module_name))
            (module_type_annotation
              (block
                (type_declaration
                  (type_binding
                    name: (type_constructor_path
                      (type_constructor)))))))
          (functor_parameter
            (module_path
              (module_name))
            (module_type_annotation
              (block
                (type_declaration
                  (type_binding
                    name: (type_constructor_path
                      (type_constructor))))))))
        return_module_type: (module_type_annotation
          (block
            (type_declaration
              (type_binding
                name: (type_constructor_path
                  (type_constructor))))
            (type_declaration
              (type_binding
                name: (type_constructor_path
                  (type_constructor))))))
        body: (block
          (type_declaration
            (type_binding
              name: (type_constructor_path
                (type_constructor))
              (type_constructor_path
                (module_path
                  (module_name))
                (type_constructor))))
          (type_declaration
            (type_binding
              name: (type_constructor_path
                (type_constructor))
              (type_constructor_path
                (module_path
                  (module_name))
                (type_constructor)))))))))

================================================================================
Functor signature
================================================================================

module Make: (Content: StaticContent) => {
  let make: string => string
}

--------------------------------------------------------------------------------

(source_file
  (module_declaration
    (module_binding
      (module_name)
      (functor
        (functor_parameters
          (functor_parameter
            (module_path
              (module_name))
            (module_type_annotation
              (module_type_path
                (module_type_name
                  (module_name))))))
        (block
          (let_declaration
            (let_binding
              (value_name)
              (type_annotation
                (function_type
                  (function_type_parameters
                    (type_constructor_path
                      (type_constructor)))
                  (type_constructor_path
                    (type_constructor)))))))))))

================================================================================
Functor use
================================================================================

module M = MyFunctor(Foo, Bar.Baz)

--------------------------------------------------------------------------------

(source_file
  (module_declaration
    (module_binding
      (module_name)
      (functor_use
        (module_path
          (module_name))
        (arguments
          (module_path
            (module_name))
          (module_path
            (module_path
              (module_name))
            (module_name)))))))

================================================================================
Alias
================================================================================

module Q = Foo.Bar.Qux
module Foo' = Foo

--------------------------------------------------------------------------------

(source_file
  (module_declaration
    (module_binding
      (module_name)
      (module_path
        (module_path
          (module_path
            (module_name))
          (module_name))
        (module_name))))
  (module_declaration
    (module_binding
      (module_name)
      (module_path
        (module_name)))))

================================================================================
Recursive
================================================================================

module rec BYOBReader: {
  include Reader
} = BYOBReader

module rec A: T = {
  let x = B.x
}
and B: T = {
  let x = 1
}

--------------------------------------------------------------------------------

(source_file
  (module_declaration
    (module_binding
      (module_name)
      (block
        (include_statement
          (module_path
            (module_name))))
      (module_path
        (module_name))))
  (module_declaration
    (module_binding
      (module_name)
      (module_type_path
        (module_type_name
          (module_name)))
      (block
        (let_declaration
          (let_binding
            (value_name)
            (value_path
              (module_path
                (module_name))
              (value_name))))))
    (module_binding
      (module_name)
      (module_type_path
        (module_type_name
          (module_name)))
      (block
        (let_declaration
          (let_binding
            (value_name)
            (number)))))))

================================================================================
Definition through extension
================================================================================

module Styles = %makeStyles(())

--------------------------------------------------------------------------------

(source_file
  (module_declaration
    (module_binding
      (module_name)
      (extension_expression
        (extension_identifier)
        (expression_statement
          (unit))))))

================================================================================
Externals
================================================================================

external aX: t => float = "aX"
external foo: int = "foo"
external foo: int = "foo"
external foo: t = "Foo"
external _makeStyles: ({..}, . unit) => {..} = "makeStyles"

external pushState: (Dom.history, ~href: string) => unit =
  "pushState"

external add: (
  t,
  ~option: [#Option(Dom.htmlOptionElement) | #OptGroup(Dom.htmlOptGroupElement)],
) => unit = "add"

--------------------------------------------------------------------------------

(source_file
  (external_declaration
    (value_name)
    (type_annotation
      (function_type
        (function_type_parameters
          (type_constructor_path
            (type_constructor)))
        (type_constructor_path
          (type_constructor))))
    (string
      (string_fragment)))
  (external_declaration
    (value_name)
    (type_annotation
      (type_constructor_path
        (type_constructor)))
    (string
      (string_fragment)))
  (external_declaration
    (value_name)
    (type_annotation
      (type_constructor_path
        (type_constructor)))
    (string
      (string_fragment)))
  (external_declaration
    (value_name)
    (type_annotation
      (type_constructor_path
        (type_constructor)))
    (string
      (string_fragment)))
  (external_declaration
    (value_name)
    (type_annotation
      (function_type
        (function_type_parameters
          (parameter
            (object_type))
          (parameter
            (uncurry)
            (unit_type)))
        (object_type)))
    (string
      (string_fragment)))
  (external_declaration
    (value_name)
    (type_annotation
      (function_type
        (function_type_parameters
          (parameter
            (type_constructor_path
              (module_path
                (module_name))
              (type_constructor)))
          (parameter
            (labeled_parameter
              (value_name)
              (type_annotation
                (type_constructor_path
                  (type_constructor))))))
        (unit_type)))
    (string
      (string_fragment)))
  (external_declaration
    (value_name)
    (type_annotation
      (function_type
        (function_type_parameters
          (parameter
            (type_constructor_path
              (type_constructor)))
          (parameter
            (labeled_parameter
              (value_name)
              (type_annotation
                (polyvar_type
                  (polyvar_declaration
                    (polyvar_identifier)
                    (polyvar_parameters
                      (type_constructor_path
                        (module_path
                          (module_name))
                        (type_constructor))))
                  (polyvar_declaration
                    (polyvar_identifier)
                    (polyvar_parameters
                      (type_constructor_path
                        (module_path
                          (module_name))
                        (type_constructor)))))))))
        (unit_type)))
    (string
      (string_fragment))))

================================================================================
Exception declaration
================================================================================

exception InputClosed(string)
exception Error = Failed
exception Invalid = Errors.Invalid

--------------------------------------------------------------------------------

(source_file
  (exception_declaration
    (constructor_name)
    (variant_parameters
      (type_constructor_path
        (type_constructor))))
  (exception_declaration
    (constructor_name)
    (constructor_path
      (constructor_name)))
  (exception_declaration
    (constructor_name)
    (constructor_path
      (module_path
        (module_name))
      (constructor_name))))

================================================================================
Module Constraints
================================================================================

module(M: T with type t = a and type t = b)

module M = (): (T with type t = int) => {}

module M = (Na: N, Nb: N): (
  (S with type t = x) with type a = b
) => {}

--------------------------------------------------------------------------------

(source_file
  (expression_statement
    (package_expression
      (module_path
        (module_name))
      (module_type_annotation
        (module_type_constraint
          (module_type_path
            (module_type_name
              (module_name)))
          (constrain_type
            (type_constructor_path
              (type_constructor))
            (type_constructor_path
              (type_constructor)))
          (constrain_type
            (type_constructor_path
              (type_constructor))
            (type_constructor_path
              (type_constructor)))))))
  (module_declaration
    (module_binding
      name: (module_name)
      definition: (functor
        parameters: (functor_parameters)
        return_module_type: (module_type_annotation
          (parenthesized_module_type
            (module_type_constraint
              (module_type_path
                (module_type_name
                  (module_name)))
              (constrain_type
                (type_constructor_path
                  (type_constructor))
                (type_constructor_path
                  (type_constructor))))))
        body: (block))))
  (module_declaration
    (module_binding
      name: (module_name)
      definition: (functor
        parameters: (functor_parameters
          (functor_parameter
            (module_path
              (module_name))
            (module_type_annotation
              (module_type_path
                (module_type_name
                  (module_name)))))
          (functor_parameter
            (module_path
              (module_name))
            (module_type_annotation
              (module_type_path
                (module_type_name
                  (module_name))))))
        return_module_type: (module_type_annotation
          (parenthesized_module_type
            (module_type_constraint
              (parenthesized_module_type
                (module_type_constraint
                  (module_type_path
                    (module_type_name
                      (module_name)))
                  (constrain_type
                    (type_constructor_path
                      (type_constructor))
                    (type_constructor_path
                      (type_constructor)))))
              (constrain_type
                (type_constructor_path
                  (type_constructor))
                (type_constructor_path
                  (type_constructor))))))
        body: (block)))))
