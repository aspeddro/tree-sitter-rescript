================================================================================
Opaque
================================================================================

type t
type t'
type \"type"
type t and b

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor)))
    (type_binding
      (type_constructor_path
        (type_constructor)))))

================================================================================
Export
================================================================================

export type t

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor)))))

================================================================================
Alias
================================================================================

type t = Foo.Bar.qux

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (type_constructor_path
        (module_path
          (module_path
            (module_name))
          (module_name))
        (type_constructor)))))

================================================================================
Private
================================================================================

type t = private string

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (type_constructor_path
        (type_constructor)))))

================================================================================
Tuple type
================================================================================

type t = (int, string, float)

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (tuple_type
        (type_constructor_path
          (type_constructor))
        (type_constructor_path
          (type_constructor))
        (type_constructor_path
          (type_constructor))))))

================================================================================
Record type
================================================================================

type t = {
  a: int,
  b: myType,

  @as("type")
  type_: string,

  mutable x: int,

  opt?: string
}

type t = Mod.t = {a: int}

type t = {}

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (record_type
        (record_type_field
          (property_identifier)
          (type_annotation
            (type_constructor_path
              (type_constructor))))
        (record_type_field
          (property_identifier)
          (type_annotation
            (type_constructor_path
              (type_constructor))))
        (decorator
          (decorator_identifier)
          (decorator_arguments
            (string
              (string_fragment))))
        (record_type_field
          (property_identifier)
          (type_annotation
            (type_constructor_path
              (type_constructor))))
        (record_type_field
          (property_identifier)
          (type_annotation
            (type_constructor_path
              (type_constructor))))
        (record_type_field
          (property_identifier)
          (type_annotation
            (type_constructor_path
              (type_constructor)))))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (type_constructor_path
        (module_path
          (module_name))
        (type_constructor))
      (record_type
        (record_type_field
          (property_identifier)
          (type_annotation
            (type_constructor_path
              (type_constructor)))))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (record_type))))

================================================================================
Extensible Variant
================================================================================

type t = ..

type t += Other

type M.t +=
  | Point
  | Line

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (variant_type
        (variant_declaration
          (constructor_name)))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (module_path
          (module_name))
        (type_constructor))
      (variant_type
        (variant_declaration
          (constructor_name))
        (variant_declaration
          (constructor_name))))))

================================================================================
Variant
================================================================================

type t =
  | A
  | A'
  | @live("t.D") D
  | B(anotherType)
  | C({foo: int, bar: string})
  | D(module(Foo))
  | D(module(Bar.t))

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (variant_type
        (variant_declaration
          (constructor_name))
        (variant_declaration
          (constructor_name))
        (decorator
          (decorator_identifier)
          (decorator_arguments
            (string
              (string_fragment))))
        (variant_declaration
          (constructor_name))
        (variant_declaration
          (constructor_name)
          (variant_parameters
            (type_constructor_path
              (type_constructor))))
        (variant_declaration
          (constructor_name)
          (variant_parameters
            (record_type
              (record_type_field
                (property_identifier)
                (type_annotation
                  (type_constructor_path
                    (type_constructor))))
              (record_type_field
                (property_identifier)
                (type_annotation
                  (type_constructor_path
                    (type_constructor)))))))
        (variant_declaration
          (constructor_name)
          (variant_parameters
            (package_type
              (module_type_path
                (module_type_name
                  (module_name))))))
        (variant_declaration
          (constructor_name)
          (variant_parameters
            (package_type
              (module_type_path
                (module_path
                  (module_name))
                (module_type_name)))))))))

================================================================================
Annotated variant
================================================================================

type rec t = Any('a): t

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (variant_type
        (variant_declaration
          (constructor_name)
          (variant_parameters
            (type_constructor_path
              (type_constructor)))
          (type_annotation
            (type_constructor_path
              (type_constructor))))))))

================================================================================
Polyvar
================================================================================

type t = [>
  | #AAA
  | #AAA'
  | #bbb(anotherType)
  | #"cc-cc"
  | #\"cc-cc"
  | #42
  | @as("42") #FortyTwo
  | anotherType
  ]


type foo<'a> = @decorator [> #Blue | #DeepBlue | #LightBlue ] as 'a
type t<'w> = [M.t<'w>]

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (polyvar_type
        (polyvar_declaration
          (polyvar_identifier))
        (polyvar_declaration
          (polyvar_identifier))
        (polyvar_declaration
          (polyvar_identifier)
          (polyvar_parameters
            (type_constructor_path
              (type_constructor))))
        (polyvar_declaration
          (polyvar_identifier
            (polyvar_string
              (string_fragment))))
        (polyvar_declaration
          (polyvar_identifier
            (polyvar_string
              (string_fragment))))
        (polyvar_declaration
          (polyvar_identifier))
        (decorator
          (decorator_identifier)
          (decorator_arguments
            (string
              (string_fragment))))
        (polyvar_declaration
          (polyvar_identifier))
        (polyvar_declaration
          (type_constructor_path
            (type_constructor))))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (type_parameters
        (type_constructor))
      (decorator
        (decorator_identifier))
      (aliased_type
        (polyvar_type
          (polyvar_declaration
            (polyvar_identifier))
          (polyvar_declaration
            (polyvar_identifier))
          (polyvar_declaration
            (polyvar_identifier)))
        (type_constructor))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (type_parameters
        (type_constructor))
      (polyvar_type
        (polyvar_declaration
          (generic_type
            (type_constructor_path
              (module_path
                (module_name))
              (type_constructor))
            (type_arguments
              (type_constructor_path
                (type_constructor)))))))))

================================================================================
Function
================================================================================

type fooA = t => float
type fooB = (t) => float
type fooC = (t1, t2) => float
type fooD = (~arg1: t1, ~arg2: t2=?, unit) => float

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (function_type
        (function_type_parameters
          (type_constructor_path
            (type_constructor)))
        (type_constructor_path
          (type_constructor)))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (function_type
        (function_type_parameters
          (parameter
            (type_constructor_path
              (type_constructor))))
        (type_constructor_path
          (type_constructor)))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (function_type
        (function_type_parameters
          (parameter
            (type_constructor_path
              (type_constructor)))
          (parameter
            (type_constructor_path
              (type_constructor))))
        (type_constructor_path
          (type_constructor)))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (function_type
        (function_type_parameters
          (parameter
            (labeled_parameter
              (value_name)
              (type_annotation
                (type_constructor_path
                  (type_constructor)))))
          (parameter
            (labeled_parameter
              (value_name)
              (type_annotation
                (type_constructor_path
                  (type_constructor)))))
          (parameter
            (unit_type)))
        (type_constructor_path
          (type_constructor))))))

================================================================================
Object
================================================================================

type t = {..}
type t = {.}
type t = {.. "my-field": int }
type t = {
  "my-field": int,
  "my-field-two": string,
  ...rest
}
type t<'a> = {.."name": string} as 'a

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (object_type)))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (object_type)))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (object_type
        (field
          (property_identifier
            (string_fragment))
          (type_constructor_path
            (type_constructor))))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (object_type
        (field
          (property_identifier
            (string_fragment))
          (type_constructor_path
            (type_constructor)))
        (field
          (property_identifier
            (string_fragment))
          (type_constructor_path
            (type_constructor)))
        (field
          (type_constructor_path
            (type_constructor))))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (type_parameters
        (type_constructor))
      (aliased_type
        (object_type
          (field
            (property_identifier
              (string_fragment))
            (type_constructor_path
              (type_constructor))))
        (type_constructor)))))

================================================================================
Generic
================================================================================

type t<'a, 'b> = (array<'a>, array<'b>)
type t = result<(), string>
type t<'a> = generic<'a> as 's

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (type_parameters
        (type_constructor)
        (type_constructor))
      (tuple_type
        (generic_type
          (type_constructor_path
            (type_constructor))
          (type_arguments
            (type_constructor_path
              (type_constructor))))
        (generic_type
          (type_constructor_path
            (type_constructor))
          (type_arguments
            (type_constructor_path
              (type_constructor)))))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (generic_type
        (type_constructor_path
          (type_constructor))
        (type_arguments
          (unit)
          (type_constructor_path
            (type_constructor))))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (type_parameters
        (type_constructor))
      (aliased_type
        (generic_type
          (type_constructor_path
            (type_constructor))
          (type_arguments
            (type_constructor_path
              (type_constructor))))
        (type_constructor)))))

================================================================================
Recursive
================================================================================

type rec t = t

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (type_constructor_path
        (type_constructor)))))

================================================================================
Decorated
================================================================================

@deriving(abstract)
type transitionCreateArgs = {
  easing: string,
}

type person = {@meth "say": (string, string) => unit}

--------------------------------------------------------------------------------

(source_file
  (decorator
    (decorator_identifier)
    (decorator_arguments
      (value_name)))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (record_type
        (record_type_field
          (property_identifier)
          (type_annotation
            (type_constructor_path
              (type_constructor)))))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (object_type
        (decorator
          (decorator_identifier))
        (field
          (property_identifier
            (string_fragment))
          (function_type
            (function_type_parameters
              (parameter
                (type_constructor_path
                  (type_constructor)))
              (parameter
                (type_constructor_path
                  (type_constructor))))
            (unit_type)))))))

================================================================================
Mutually Recursive
================================================================================

type rec student = {
  teacher: teacher
}
and teacher = {
  students: array<student>
}

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (record_type
        (record_type_field
          (property_identifier)
          (type_annotation
            (type_constructor_path
              (type_constructor))))))
    (type_binding
      (type_constructor_path
        (type_constructor))
      (record_type
        (record_type_field
          (property_identifier)
          (type_annotation
            (generic_type
              (type_constructor_path
                (type_constructor))
              (type_arguments
                (type_constructor_path
                  (type_constructor))))))))))

================================================================================
Labled function with uncurried
================================================================================

type test = (. ~attr: string) => unit

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (function_type
        (function_type_parameters
          (parameter
            (uncurry)
            (labeled_parameter
              (value_name)
              (type_annotation
                (type_constructor_path
                  (type_constructor))))))
        (unit_type)))))

================================================================================
Polymorphic type
================================================================================

let id: 'a. 'a => 'a = x => x

let add: type a. (number<a>, number<a>) => a

--------------------------------------------------------------------------------

(source_file
  (let_declaration
    (let_binding
      (value_name)
      (type_annotation
        (polymorphic_type
          (type_constructor)
          (function_type
            (function_type_parameters
              (type_constructor_path
                (type_constructor)))
            (type_constructor_path
              (type_constructor)))))
      (function
        (value_name)
        (value_name))))
  (let_declaration
    (let_binding
      (value_name)
      (type_annotation
        (polymorphic_type
          (abstract_type
            (type_constructor))
          (function_type
            (function_type_parameters
              (parameter
                (generic_type
                  (type_constructor_path
                    (type_constructor))
                  (type_arguments
                    (type_constructor_path
                      (type_constructor)))))
              (parameter
                (generic_type
                  (type_constructor_path
                    (type_constructor))
                  (type_arguments
                    (type_constructor_path
                      (type_constructor))))))
            (type_constructor_path
              (type_constructor))))))))

================================================================================
Variance annotations
================================================================================

type t<+'a>
type t<-'a>

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (type_parameters
        (type_constructor))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (type_parameters
        (type_constructor)))))

================================================================================
Type constraint
================================================================================

type t<'a> = 'a constraint 'a = int
type decorator<'a, 'b> = 'a => 'b constraint 'a = int constraint 'b = _ => _
type t<'a> constraint 'a = t

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (type_parameters
        (type_constructor))
      (type_constructor_path
        (type_constructor))
      (type_constraint
        (type_constructor_path
          (type_constructor))
        (type_constructor_path
          (type_constructor)))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (type_parameters
        (type_constructor)
        (type_constructor))
      (function_type
        (function_type_parameters
          (type_constructor_path
            (type_constructor)))
        (type_constructor_path
          (type_constructor)))
      (type_constraint
        (type_constructor_path
          (type_constructor))
        (type_constructor_path
          (type_constructor)))
      (type_constraint
        (type_constructor_path
          (type_constructor))
        (function_type
          (function_type_parameters
            (type_constructor_path
              (type_constructor)))
          (type_constructor_path
            (type_constructor))))))
  (type_declaration
    (type_binding
      (type_constructor_path
        (type_constructor))
      (type_parameters
        (type_constructor))
      (type_constraint
        (type_constructor_path
          (type_constructor))
        (type_constructor_path
          (type_constructor))))))
